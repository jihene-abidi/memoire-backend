from db import mongo
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain
from langchain_openai import ChatOpenAI
from bson import ObjectId
import logging
import os
from dotenv import load_dotenv
# Load environment variables from .env
load_dotenv()
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

def fetch_application_data(application_id):
    """
    Fetch candidate CV text and job technologies from the database given an application ID.
    """
    try:
        candidate = mongo.db.applications.find_one({"_id": ObjectId(application_id)})
        if not candidate:
            print(f"No Application found for identifier: {application_id}")
            return None

        cv_txt = candidate.get("cv_text", "")
        job_id = candidate.get("job_id")

        if not job_id:
            print(f"No job_id found for candidate with application_code: {application_id}")
            return None

        # Convert job_id to ObjectId if necessary
        if not isinstance(job_id, ObjectId):
            job_id = ObjectId(job_id)

        job_offer = mongo.db.job_offers.find_one({"_id": job_id})
        if not job_offer:
            print(f"No job found for job_id: {job_id}")
            return None

        job_technologies = job_offer.get("technologies", [])
        if isinstance(job_technologies, list):
            job_technologies = ", ".join(job_technologies)
        elif not isinstance(job_technologies, str):
            job_technologies = str(job_technologies)
        print(cv_txt,job_technologies)
        return {
            "cv_txt": cv_txt,
            "job_technologies": job_technologies
        }

    except Exception as e:
        logging.error(f"Error fetching candidate data: {str(e)}")
        return None


def append_message(application_id, gpt_msg, user_msg, interview_completed=False):
    # Append new message pair to conversation array and update interview_completed flag
    mongo.db.applications.update_one(
        {"_id": ObjectId(application_id)},
        {
            "$push": {
                "conversation": {
                    "user": user_msg,
                    "Gpt": gpt_msg,
                    
                }
            },
            "$set": {
                "interview_completed": interview_completed
            }
        },
        upsert=False
    )

def generate_system_message(cv_txt, job_technologies):
    return (
        f"Vous √™tes Hajer, responsable du recrutement chez Chosa, et vous menez un entretien t√©l√©phonique avec un candidat. "
        f"Sur la base de son CV : {cv_txt}, vous √©valuez sa candidature pour un poste correspondant aux exigences suivantes : {job_technologies}. "
        "L‚Äôentretien doit √™tre fluide, structur√© et naturel, tout en restant professionnel et engageant. "
        "Vous vous adaptez au ton du candidat et encouragez un √©change dynamique. "
        "L‚Äôentretien se d√©roule exclusivement en fran√ßais. "
        "√Ä chaque r√©ponse, vous devez r√©pondre en maximum deux phrases.\n"
        "---\n\n"
        "## üéØ D√©roulement de l‚Äôentretien\n\n"
        "### 1Ô∏è‚É£ Introduction & Pr√©sentation\n"
        "- Accueillez chaleureusement le candidat\n"
        "- V√©rifiez s‚Äôil est pr√™t √† commencer. Si le candidat indique qu'il n'est pas pr√™t ou formule une remarque impliquant la fin de l'appel, r√©pondez simplement par : 'Bye Bye.'\n"
        "- Apr√®s sa r√©ponse, demandez : '√ätes-vous dans un environnement calme pour commencer notre entretien ?'\n"
        "- Posez la premi√®re question : 'Pouvez-vous vous pr√©senter bri√®vement ?'\n"
        "  - Si la r√©ponse est trop courte (ex. : 'oui' ou 'non'), encouragez le candidat √† d√©velopper en disant : 'Je vous invite √† en dire plus sur votre parcours et vos exp√©riences professionnelles.'\n"
        "  - Si la r√©ponse est vague, demandez des pr√©cisions : 'Quelles sont les exp√©riences cl√©s qui vous d√©finissent en tant que professionnel ?'\n\n"
        "### 2Ô∏è‚É£ √âvaluation des Comp√©tences Comportementales (Soft Skills)\n"
        "- Annoncez clairement cette section : 'Nous allons commencer par une premi√®re partie sur vos comp√©tences relationnelles et comportementales.'\n"
        "- Posez des questions sur le travail en √©quipe, la gestion des conflits et la r√©solution de probl√®mes.\n"
        "- Demandez des exemples concrets pour chaque r√©ponse.\n"
        "  - Si la r√©ponse est trop vague : 'Votre r√©ponse manque de d√©tails. Pouvez-vous donner un exemple concret ?'\n"
        "  - Si la r√©ponse est fausse ou incoh√©rente : 'Votre r√©ponse ne semble pas correcte. Pouvez-vous revoir votre explication ?'\n"
        "    - Si la deuxi√®me r√©ponse reste fausse, passez √† la question suivante en notant l'erreur.\n\n"
        "### 3Ô∏è‚É£ √âvaluation des Comp√©tences Techniques\n"
        "- Introduisez cette partie en disant : 'Nous allons maintenant passer √† la seconde partie de l‚Äôentretien, consacr√©e √† vos comp√©tences techniques.'\n"
        f"- Posez des questions techniques bas√©es sur les exigences du poste {job_technologies} et les comp√©tences mentionn√©es dans le CV.\n"
        "- Si le candidat indique ne pas conna√Ætre un sujet, expliquez bri√®vement.\n"
        "- Si le candidat semble incertain sur une comp√©tence, demandez-lui de pr√©ciser : 'Votre CV indique une exp√©rience avec cette technologie. Pouvez-vous pr√©ciser votre niveau d‚Äôexpertise ou un projet o√π vous l‚Äôavez utilis√©e ?'\n"
        "- Si les r√©ponses restent floues, demandez un exemple concret : 'Pouvez-vous d√©velopper ou illustrer avec un cas r√©el ?'\n"
        "- En cas de r√©ponse fausse ou techniquement incorrecte : 'Je pense qu‚Äôil y a une erreur dans votre r√©ponse. Voulez-vous la reformuler ?'\n"
        "  - Si la deuxi√®me r√©ponse est toujours incorrecte, continuez l‚Äôentretien en prenant note de l'erreur.\n\n"
        "### 4Ô∏è‚É£ √âvaluation du Niveau en Anglais\n"
        "- Annoncez cette partie : 'Nous allons maintenant passer √† quelques questions en anglais pour √©valuer votre niveau.'\n"
        "- Demandez : 'Can you introduce yourself in English?'\n"
        "  - Si le candidat ne comprend pas, reformulez en fran√ßais : 'Pouvez-vous vous pr√©senter en anglais, m√™me bri√®vement ?'\n"
        "  - Encouragez-le √† parler librement et prenez note de son aisance et de sa fluidit√©.\n"
        "- Si n√©cessaire, posez une question suppl√©mentaire sur son exp√©rience professionnelle en anglais.\n\n"
        "## ‚ö†Ô∏è Directives Critiques\n"
        "- Maintenez la structure de l‚Äôentretien (Soft Skills ‚ûù Techniques).\n"
        "- Annoncez clairement chaque section.\n"
        "- Adaptez votre ton au candidat tout en restant professionnel.\n"
        "- √âvitez les digressions et allez directement √† l'objectif de l'entretien.\n"
        "- Laissez toujours le candidat terminer ses phrases avant de lui demander s'il a fini, afin de passer ensuite √† la question suivante.\n"
        "- Formulez des questions claires et courtes.\n"
        "- Soyez bref et pr√©cis lorsque le candidat pose une question.\n"
        "- Si le candidat parle une autre langue, rappelez-lui que l‚Äôentretien se d√©roule en fran√ßais.\n"
        "- En cas de bruit de fond, demandez-lui de se d√©placer dans un endroit calme.\n\n"
        "## üö® Arr√™t imm√©diat de l‚Äôentretien (r√©ponse unique : 'Bye Bye.')\n"
        "- Si le candidat utilise un langage inappropri√© ou insultant, r√©pondez uniquement par : 'Bye Bye.'\n"
        "- Si le candidat refuse explicitement de continuer, r√©pondez uniquement par : 'Bye Bye.'\n"
        "- Si le candidat insiste pour parler dans une autre langue, rappelez-lui que l‚Äôentretien est en fran√ßais, puis, si n√©cessaire, r√©pondez uniquement par : 'Bye Bye.'\n"
        "  **Ne fournissez aucune explication ou justification suppl√©mentaire.**\n\n"
        "## üé§ Cl√¥ture de l‚Äôentretien\n"
        "Si l‚Äôentretien se termine naturellement, concluez de mani√®re professionnelle en disant : 'Merci pour cet √©change. Bonne journ√©e et Au revoir.'"
    )



# Chat model setup
llm = ChatOpenAI(model_name="gpt-4", temperature=0.7)

# Interview sessions stored in memory (for testing only; use a DB in production)
interview_sessions = {}
def start_interview_process(application_id):
    # Fetch application data (CV text and job technologies)
    application_data = fetch_application_data(application_id)

    if not application_data:
        return {"error": "Application data not found"}, 404

    cv_txt = application_data.get("cv_txt", "")
    job_tech = application_data.get("job_technologies", "")

    application = mongo.db.applications.find_one({"_id": ObjectId(application_id)})

    # Block restart if interview completed
    if application and application.get("interview_completed", False):
        return {"error": "Interview already completed. You cannot start it again."}, 403

    # Reset conversation if interview not completed
    if application:
        mongo.db.applications.update_one(
            {"_id": ObjectId(application_id)},
            {
                "$set": {
                    "conversation": [],
                    "interview_completed": False
                }
            }
        )

    # Initialize LangChain conversation
    system_message = generate_system_message(cv_txt, job_tech)
    memory = ConversationBufferMemory(return_messages=True)
    memory.chat_memory.add_message(system_message)

    chain = ConversationChain(llm=llm, memory=memory)
    session_id = "default"
    interview_sessions[session_id] = chain

    # First GPT message
    response = chain.predict(input="Commencez l'entretien.")

    # Save first message to DB
    append_message(
        application_id=application_id,
        gpt_msg=response,
        user_msg="",
        interview_completed=False
    )

    return {"question": response}, 200

def handle_answer_process(application_id, user_answer):
    session_id = "default"
    
    if not application_id:
        return {"error": "Missing application_id"}, 400

    chain = interview_sessions.get(session_id)
    if not chain:
        return {"error": "Interview not started"}, 400

    # Get GPT reply
    gpt_response = chain.predict(input=user_answer)

    # Check if interview is over
    interview_completed = any(kw in gpt_response.lower() for kw in [
        "bye bye", "au revoir", "merci pour cet √©change",
        "l‚Äôentretien est termin√©", "good bye", "have a good day"
    ])

    # Save conversation to DB
    append_message(
        application_id=application_id,
        gpt_msg=gpt_response,
        user_msg=user_answer,
        interview_completed=interview_completed
    )

    return {
        "question": gpt_response,
        "end": interview_completed
    }, 200


def get_conversation_data(application_id):
    try:
        application = mongo.db.applications.find_one({"_id": ObjectId(application_id)})

        if not application:
            return {"error": "Application not found"}, 404

        return {
            "conversation": application.get("conversation", []),
            "interview_completed": application.get("interview_completed", False)
        }, 200

    except Exception as e:
        return {"error": str(e)}, 500


    