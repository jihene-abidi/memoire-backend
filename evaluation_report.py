import os # Pour interagir avec les variables d'environnement
from flask import Flask, request, jsonify # Pour cr√©er une API web
from dotenv import load_dotenv # Pour charger les variables d'environnement depuis un fichier .env
from langchain.prompts import ChatPromptTemplate # Pour cr√©er un prompt structur√© pour le mod√®le
from langchain_openai import ChatOpenAI  # Pour utiliser le mod√®le OpenAI via LangChain
from db import mongo # Connexion √† la base de donn√©es MongoDB
from reportlab.lib.pagesizes import A4 # Format de page pour le PDF
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle # Styles de texte pour PDF
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer # El√©ments de base pour cr√©er le PDF
from reportlab.lib import colors # Couleurs pour PDF
from bson import ObjectId # Pour g√©rer les IDs MongoDB
load_dotenv() # Charge les variables d'environnement depuis le fichier .env

# Initialisation du mod√®le GPT-4o-mini avec un certain degr√© de cr√©ativit√© (temperature = 0.8)
model = ChatOpenAI(model="gpt-4o-mini",temperature=0.8,openai_api_key=os.getenv("OPENAI_API_KEY"))

# Fonction pour r√©cup√©rer les donn√©es d'une candidature
def fetch_application_data(application_id):
    # Recherche la candidature par ID dans MongoDB
    application = mongo.db.applications.find_one({"_id": ObjectId(application_id)})
    if not application:
        raise Exception("Application not found.")

    # R√©cup√®re les champs de la candidature
    cv_text = application.get("cv_text", "")
    conversation = application.get("conversation", [])
    job_id = application.get("job_id")

    if not job_id:
        raise Exception("Job ID missing in application.")

    # R√©cup√®re l‚Äôoffre d‚Äôemploi associ√©e √† cette candidature
    job = mongo.db.job_offers.find_one({"_id": ObjectId(job_id)})
    if not job:
        raise Exception("Job not found.")

    job_description = job.get("job_description", "")

    # Retourne les donn√©es pertinentes
    return {
        "cv_txt": cv_text,
        "conversation": conversation,
        "job": job_description
    }

# Fonction pour g√©n√©rer le contenu du rapport d'entretien en texte
def generate_report(cv_text, chat_text, offer_text):
    # Messages de consigne pour le mod√®le GPT
	messages = [
		("system", "You are an experienced recruiter in human resources. Your job is to evaluate a candidate based on their CV, the job offer, and the interview transcript."),
		("human",
		 "G√©n√©rez un **rapport d'entretien d√©taill√©** pour le candidat en utilisant les √©l√©ments suivants :\n\n"
		 "**üìå Offre d'emploi :**\n{offer_text}\n\n"
		 "**üìé CV du candidat :**\n{cv_text}\n\n"
		 "**üìù Transcription de l‚Äôentretien :**\n{chat_text}\n\n"
		 "Le rapport doit suivre cette structure :\n\n"

		 "üìã **1. Informations du candidat**\n"
		 "- **Nom et Pr√©nom** : [extrait le nom et le pr√©nom √† partir du cv]\n"
		 "- **Poste vis√©** : [Extrait de l‚Äôoffre d‚Äôemploi]\n"
		 "- **Ressoure humaines** : Hajer \n\n"

		 "üõ† **2. Comp√©tences techniques (Hard Skills)**\n"
		 "- √âvaluer les comp√©tences en lien avec le poste et les noter sur 100%.\n"
		 "  - **Ma√Ætrise de [Logiciel/Technologie]** : XX%\n"
		 "  - **Exp√©rience en [Domaine/Industrie]** : XX%\n"
		 "  - **Connaissance en [Sujet sp√©cifique]** : XX%\n\n"

		 "üí° **3. Comp√©tences comportementales (Soft Skills)**\n"
		 "- Identifier et √©valuer les soft skills observ√©es pendant l‚Äôentretien.\n"
		 "  - **Exemples** : Esprit d‚Äô√©quipe, Capacit√© d‚Äôadaptation, Leadership, Communication\n\n"

		" üåç **4. Niveau de langue**\n"
		"- **√âvaluer le niveau de langue du candidat √† partir de la conversation d‚Äôentretien**\n"
		"- D√©terminer son niveau en fonction de la fluidit√©, de la pr√©cision grammaticale et de la richesse du vocabulaire.\n"
		"- Si un test de langue a √©t√© r√©alis√©, attribuer un niveau sp√©cifique.8\n"
		"- Utiliser cette √©chelle d‚Äô√©valuation : **D√©butant / Interm√©diaire / Avanc√© / Courant**.\n"

		" üìå **Langues d√©tect√©es et √©valu√©es** :\n"
		"- **Fran√ßais** : [D√©butant / Interm√©diaire / Avanc√© / Courant]\n"
		"- **Autres langues mentionn√©es ou test√©es dans l‚Äôentretien** :\n"
		"- **Anglais** (si test√©) : [D√©butant / Interm√©diaire / Avanc√© / Courant]\n"
	                          

		"üîç **7. Conseils et axes d‚Äôam√©lioration**\n"
			 "- Sugg√©rer des pistes d‚Äôam√©lioration pour le candidat.\n"
			 "  - Approfondir ses connaissances sur [Sujet]\n"
			 "  - Travailler sur [Comp√©tence √† am√©liorer]\n\n"
	
			 "üìù **8. Commentaire g√©n√©ral sur l‚Äôentretien**\n"
			 "- Synth√®se globale des performances du candidat.\n"
			 "- Points forts et axes d‚Äôam√©lioration.\n\n"
			 
			 "üìä **9. Score global et √©chelle d‚Äô√©valuation**\n"
			 "- Donner un pourcentage global de r√©ussite √† l‚Äôentretien."
			 "- Indiquer l‚Äô√©chelle d‚Äô√©valuation utilis√©e."
	
			 "‚úÖ **10. D√©cision finale**\n"
			 "- r√©uisste ou refus \n"
			 " -pour en cons√©diration que le pourcentage sup√©rieur ou √©gale de 70% est une r√©ussite dans l'entretien sinon refus \n"


		 )
	]
      
    # Cr√©e le prompt √† envoyer au mod√®le √† partir du template et des variables
	prompt_template = ChatPromptTemplate.from_messages(
		messages
	)

	prompt = prompt_template.invoke({
		"cv_text": cv_text,
		"chat_text": chat_text,
		"offer_text": offer_text
	})
      
    # Envoie le prompt au mod√®le et r√©cup√®re la r√©ponse
	result = model.invoke(prompt)
	return result.content



# Fonction qui g√©n√®re un fichier PDF √† partir du contenu texte
def generate_pdf(content, filename):

	doc = SimpleDocTemplate(str(filename), pagesize=A4,
	                        leftMargin=30, rightMargin=30, topMargin=30, bottomMargin=30)

	elements = []
	styles = getSampleStyleSheet()

	# Style pour le titre du rapport
	title_style = ParagraphStyle(
		'TitleStyle', parent=styles['Title'], fontSize=14, spaceAfter=10, alignment=1
	)

	# Style pour le texte normal
	normal_style = ParagraphStyle(
		'NormalStyle', parent=styles['Normal'], fontSize=10, leading=14, spaceAfter=6
	)

	# Titre du rapport
	elements.append(Paragraph("üìÑ **Rapport d‚ÄôEntretien**", title_style))
	elements.append(Spacer(1, 10))

	# Ajout de chaque paragraphe du contenu
	for paragraph in content.split("\n"):
		if paragraph.strip():
			elements.append(Paragraph(paragraph, normal_style))
			elements.append(Spacer(1, 4))

    # Fonction pour ajouter un pied de page avec num√©ro
	def footer(canvas, doc):
		canvas.setFont("Helvetica", 8)
		canvas.setFillColor(colors.grey)
		canvas.drawString(30, 20, f"Page {doc.page}/2")  # Max 2 pages

	doc.build(elements, onLaterPages=footer, onFirstPage=footer)


# Fonction principale pour g√©n√©rer un rapport PDF pour une candidature
def generate_candidate_report(application_id):
    
    # √âtape 1 : R√©cup√©ration des donn√©es
    
    candidate_data = fetch_application_data(application_id)
    cv_text = candidate_data['cv_txt']
    chat_text = candidate_data['conversation']
    offer_text = candidate_data['job']

	# √âtape 2 : G√©n√©ration du rapport avec GPT

    report_content = generate_report(cv_text, chat_text, offer_text)
    
	# √âtape 3 : D√©finir le chemin du fichier PDF √† g√©n√©rer
      
    upload_folder = os.getenv('', 'uploads/reports')  # Chemin de sauvegarde
    pdf_path = upload_folder +"/" + f"rapport_entretien-{application_id}.pdf" # concatination du nom du fichier
    
	# √âtape 4 : G√©n√©rer le PDF

    generate_pdf(report_content, pdf_path)

    # √âtape 5 : Enregistrer le chemin du PDF dans la base de donn√©es

    # Mise √† jour de la base de donn√©es avec le chemin du rapport
    mongo.db.applications.update_one(
        {"_id": ObjectId(application_id)},
        {"$set": {"report_path": pdf_path}}
    )


    return pdf_path

